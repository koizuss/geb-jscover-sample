apply plugin: 'groovy'
apply plugin: 'jetty'

ext {
    chromeDriver = file('tools/chromedriver/chromedriver')
    jscoverPort = 9999
    jscoverJar = file('tools/jscover/JSCover-0.3.0/target/dist/JSCover-all.jar')
}

/**
 * Repositories
 * @see http://www.gradle.org/docs/current/userguide/userguide_single.html#sec:repositories
 */
repositories {
    mavenCentral()
}

/**
 * Declare dependencies
 * @see http://www.gradle.org/docs/current/userguide/userguide_single.html#sec:how_to_declare_your_dependencies
 */
dependencies {
    def gebVersion = '0.7.2'
    def seleniumVersion = '2.30.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8',
                "org.codehaus.geb:geb-spock:$gebVersion",
                "org.codehaus.geb:geb-junit4:$gebVersion",
                "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"

    compile 'org.codehaus.groovy:groovy-all:1.8.5'   // gebにあわせる
}

task setupChromeDriver << {
    ext {
        // src = 'https://chromedriver.googlecode.com/files/chromedriver_mac_26.0.1383.0.zip'
        src = 'https://chromedriver.googlecode.com/files/chromedriver2_mac32_0.9.zip'
        dest = file(chromeDriver.parent + '/archives')
        zipfile = new File(dest.path, src.split('/')[-1])
    }

    if(!dest.exists()) assert dest.mkdirs(), "mkdir failed [$dest]"

    println "$name: download: $src"
    if(!zipfile.exists()) ant.get(src: src, dest: dest, verbose: true)
    assert zipfile.exists(), "download failed [$src]"

    copy {
        from zipTree(zipfile)
        into chromeDriver.parent
    }.execute()
}

task setupJscover << {
    ext {
        root = file('tools/jscover/')
        version = '0.3.0'
        artifact = "JSCover-$version"
        src = "http://jaist.dl.sourceforge.net/project/jscover/${artifact}.zip"
        archives = new File(root.path, '/archives')
        zipfile = new File(archives.path, src.split('/')[-1])
        target = new File(root.path, artifact)
    }

    if(!archives.exists()) assert archives.mkdirs(), "mkdir failed [$archives]"

    println "$name: download: $src"
    if(!zipfile.exists()) ant.get(src: src, dest: archives, verbose: true)
    assert zipfile.exists(), "download failed [$src]"

    if(target.exists()) {
        ant.delete(dir: target);
    }

    assert target.mkdirs(), "mkdir failed [$target]"

    copy {
        from zipTree(zipfile)
        into target.path
    }.execute()
}

task setup(dependsOn: [setupChromeDriver, setupJscover])

stopPort = 8099
stopKey = 'stopKey'
test {
    doFirst {
        if(!chromeDriver.exists()) setupChromeDriver.execute()
        systemProperty 'webdriver.chrome.driver', chromeDriver

        jettyRun.daemon = true
        jettyRun.execute()

        if(!jscoverJar.exists()) setupJscover.execute()
        jscoverRun.execute()
    }

    doLast {
        jettyStop.execute()
        jscoverStop.execute()
    }
}

/**
 * @see http://tntim96.github.io/JSCover/manual/manual.xml
 */
task jscoverRun << {
    // java -jar tools/jscover/JSCover-0.3.0/target/dist/JSCover-all.jar -ws --proxy --port=9999 --report-dir=build/reports/jscover
    ext {
        reportDir = file('build/reports/jscover')
    }

    ant{
        java(jar: jscoverJar, fork: true, spawn: true) {
            arg(value: '-ws')
            arg(value: '--proxy')
            arg(value: "--port=$jscoverPort")
            arg(value: "--report-dir=$reportDir")
        }
        waitfor(maxwait: 5,
                maxwaitunit: 'second',
                checkevery: 250,
                checkeveryunit: "millisecond",
                timeoutproperty: "failed") {

            http(url: "http://localhost:$jscoverPort/jscoverage.html")
        }
        fail(if: "failed")
    }

    println "start jscover server [http://localhost:$jscoverPort]"
}

task jscoverStop << {
    ant.get(src: "http://localhost:$jscoverPort/stop", dest: "$buildDir/jscover-stop.txt")
    println 'stop jscover server'
}

/**
 * Wrapper task
 * @see http://www.gradle.org/docs/current/userguide/userguide_single.html#gradle_wrapper
 */
task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}
